//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var info: info { .init(bundle: bundle) }
  var font: font { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func info(bundle: Foundation.Bundle) -> info {
    .init(bundle: bundle)
  }
  func font(bundle: Foundation.Bundle) -> font {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.font.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.color` struct is generated, and contains static references to 13 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }

    /// Color `backgroundColor`.
    var backgroundColor: RswiftResources.ColorResource { .init(name: "backgroundColor", path: [], bundle: bundle) }

    /// Color `createDescriptionColor`.
    var createDescriptionColor: RswiftResources.ColorResource { .init(name: "createDescriptionColor", path: [], bundle: bundle) }

    /// Color `createPinColor`.
    var createPinColor: RswiftResources.ColorResource { .init(name: "createPinColor", path: [], bundle: bundle) }

    /// Color `createTitleColor`.
    var createTitleColor: RswiftResources.ColorResource { .init(name: "createTitleColor", path: [], bundle: bundle) }

    /// Color `createWalletAuthTitleColor`.
    var createWalletAuthTitleColor: RswiftResources.ColorResource { .init(name: "createWalletAuthTitleColor", path: [], bundle: bundle) }

    /// Color `createWalletBackColor`.
    var createWalletBackColor: RswiftResources.ColorResource { .init(name: "createWalletBackColor", path: [], bundle: bundle) }

    /// Color `createWalletBackgroundColor`.
    var createWalletBackgroundColor: RswiftResources.ColorResource { .init(name: "createWalletBackgroundColor", path: [], bundle: bundle) }

    /// Color `endButtonColor`.
    var endButtonColor: RswiftResources.ColorResource { .init(name: "endButtonColor", path: [], bundle: bundle) }

    /// Color `pinColor`.
    var pinColor: RswiftResources.ColorResource { .init(name: "pinColor", path: [], bundle: bundle) }

    /// Color `portfolioTitleColor`.
    var portfolioTitleColor: RswiftResources.ColorResource { .init(name: "portfolioTitleColor", path: [], bundle: bundle) }

    /// Color `startButtonColor`.
    var startButtonColor: RswiftResources.ColorResource { .init(name: "startButtonColor", path: [], bundle: bundle) }

    /// Color `walletTitleColor`.
    var walletTitleColor: RswiftResources.ColorResource { .init(name: "walletTitleColor", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 22 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `Logo`.
    var logo: RswiftResources.ImageResource { .init(name: "Logo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `arrowBackImage`.
    var arrowBackImage: RswiftResources.ImageResource { .init(name: "arrowBackImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `backUpImage`.
    var backUpImage: RswiftResources.ImageResource { .init(name: "backUpImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `cardImage`.
    var cardImage: RswiftResources.ImageResource { .init(name: "cardImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `checkImage`.
    var checkImage: RswiftResources.ImageResource { .init(name: "checkImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `chooseThemeImage`.
    var chooseThemeImage: RswiftResources.ImageResource { .init(name: "chooseThemeImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `closeImage`.
    var closeImage: RswiftResources.ImageResource { .init(name: "closeImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `contactSupportImage`.
    var contactSupportImage: RswiftResources.ImageResource { .init(name: "contactSupportImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `createWalletFaceIdImage`.
    var createWalletFaceIdImage: RswiftResources.ImageResource { .init(name: "createWalletFaceIdImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `createWalletTouchIdImage`.
    var createWalletTouchIdImage: RswiftResources.ImageResource { .init(name: "createWalletTouchIdImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ethereumToken`.
    var ethereumToken: RswiftResources.ImageResource { .init(name: "ethereumToken", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `faceIdImage`.
    var faceIdImage: RswiftResources.ImageResource { .init(name: "faceIdImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `selectedSettingsTab`.
    var selectedSettingsTab: RswiftResources.ImageResource { .init(name: "selectedSettingsTab", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `selectedWalletTab`.
    var selectedWalletTab: RswiftResources.ImageResource { .init(name: "selectedWalletTab", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `settingImage`.
    var settingImage: RswiftResources.ImageResource { .init(name: "settingImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `settingsTab`.
    var settingsTab: RswiftResources.ImageResource { .init(name: "settingsTab", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `sharkCreateImage`.
    var sharkCreateImage: RswiftResources.ImageResource { .init(name: "sharkCreateImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `sharkInstructionImage`.
    var sharkInstructionImage: RswiftResources.ImageResource { .init(name: "sharkInstructionImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `touchIdImage`.
    var touchIdImage: RswiftResources.ImageResource { .init(name: "touchIdImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `walletCardImage`.
    var walletCardImage: RswiftResources.ImageResource { .init(name: "walletCardImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `walletTab`.
    var walletTab: RswiftResources.ImageResource { .init(name: "walletTab", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `warningImage`.
    var warningImage: RswiftResources.ImageResource { .init(name: "warningImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    let bundle: Foundation.Bundle
    var uiApplicationSceneManifest: uiApplicationSceneManifest { .init(bundle: bundle) }

    func uiApplicationSceneManifest(bundle: Foundation.Bundle) -> uiApplicationSceneManifest {
      .init(bundle: bundle)
    }

    struct uiApplicationSceneManifest {
      let bundle: Foundation.Bundle

      let uiApplicationSupportsMultipleScenes: Bool = false

      var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest"], key: "_key") ?? "UIApplicationSceneManifest" }
      var uiSceneConfigurations: uiSceneConfigurations { .init(bundle: bundle) }

      func uiSceneConfigurations(bundle: Foundation.Bundle) -> uiSceneConfigurations {
        .init(bundle: bundle)
      }

      struct uiSceneConfigurations {
        let bundle: Foundation.Bundle
        var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations"], key: "_key") ?? "UISceneConfigurations" }
        var uiWindowSceneSessionRoleApplication: uiWindowSceneSessionRoleApplication { .init(bundle: bundle) }

        func uiWindowSceneSessionRoleApplication(bundle: Foundation.Bundle) -> uiWindowSceneSessionRoleApplication {
          .init(bundle: bundle)
        }

        struct uiWindowSceneSessionRoleApplication {
          let bundle: Foundation.Bundle
          var defaultConfiguration: defaultConfiguration { .init(bundle: bundle) }

          func defaultConfiguration(bundle: Foundation.Bundle) -> defaultConfiguration {
            .init(bundle: bundle)
          }

          struct defaultConfiguration {
            let bundle: Foundation.Bundle
            var uiSceneConfigurationName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneConfigurationName") ?? "Default Configuration" }
            var uiSceneDelegateClassName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate" }
          }
        }
      }
    }
  }

  /// This `_R.font` struct is generated, and contains static references to 18 fonts.
  struct font: Sequence {
    let bundle: Foundation.Bundle

    /// Font `NotoSans-Black`.
    var notoSansBlack: RswiftResources.FontResource { .init(name: "NotoSans-Black", bundle: bundle, filename: "NotoSans-Black.ttf") }

    /// Font `NotoSans-BlackItalic`.
    var notoSansBlackItalic: RswiftResources.FontResource { .init(name: "NotoSans-BlackItalic", bundle: bundle, filename: "NotoSans-BlackItalic.ttf") }

    /// Font `NotoSans-Bold`.
    var notoSansBold: RswiftResources.FontResource { .init(name: "NotoSans-Bold", bundle: bundle, filename: "NotoSans-Bold.ttf") }

    /// Font `NotoSans-BoldItalic`.
    var notoSansBoldItalic: RswiftResources.FontResource { .init(name: "NotoSans-BoldItalic", bundle: bundle, filename: "NotoSans-BoldItalic.ttf") }

    /// Font `NotoSans-ExtraBold`.
    var notoSansExtraBold: RswiftResources.FontResource { .init(name: "NotoSans-ExtraBold", bundle: bundle, filename: "NotoSans-ExtraBold.ttf") }

    /// Font `NotoSans-ExtraBoldItalic`.
    var notoSansExtraBoldItalic: RswiftResources.FontResource { .init(name: "NotoSans-ExtraBoldItalic", bundle: bundle, filename: "NotoSans-ExtraBoldItalic.ttf") }

    /// Font `NotoSans-ExtraLight`.
    var notoSansExtraLight: RswiftResources.FontResource { .init(name: "NotoSans-ExtraLight", bundle: bundle, filename: "NotoSans-ExtraLight.ttf") }

    /// Font `NotoSans-ExtraLightItalic`.
    var notoSansExtraLightItalic: RswiftResources.FontResource { .init(name: "NotoSans-ExtraLightItalic", bundle: bundle, filename: "NotoSans-ExtraLightItalic.ttf") }

    /// Font `NotoSans-Italic`.
    var notoSansItalic: RswiftResources.FontResource { .init(name: "NotoSans-Italic", bundle: bundle, filename: "NotoSans-Italic.ttf") }

    /// Font `NotoSans-Light`.
    var notoSansLight: RswiftResources.FontResource { .init(name: "NotoSans-Light", bundle: bundle, filename: "NotoSans-Light.ttf") }

    /// Font `NotoSans-LightItalic`.
    var notoSansLightItalic: RswiftResources.FontResource { .init(name: "NotoSans-LightItalic", bundle: bundle, filename: "NotoSans-LightItalic.ttf") }

    /// Font `NotoSans-Medium`.
    var notoSansMedium: RswiftResources.FontResource { .init(name: "NotoSans-Medium", bundle: bundle, filename: "NotoSans-Medium.ttf") }

    /// Font `NotoSans-MediumItalic`.
    var notoSansMediumItalic: RswiftResources.FontResource { .init(name: "NotoSans-MediumItalic", bundle: bundle, filename: "NotoSans-MediumItalic.ttf") }

    /// Font `NotoSans-Regular`.
    var notoSansRegular: RswiftResources.FontResource { .init(name: "NotoSans-Regular", bundle: bundle, filename: "NotoSans-Regular.ttf") }

    /// Font `NotoSans-SemiBold`.
    var notoSansSemiBold: RswiftResources.FontResource { .init(name: "NotoSans-SemiBold", bundle: bundle, filename: "NotoSans-SemiBold.ttf") }

    /// Font `NotoSans-SemiBoldItalic`.
    var notoSansSemiBoldItalic: RswiftResources.FontResource { .init(name: "NotoSans-SemiBoldItalic", bundle: bundle, filename: "NotoSans-SemiBoldItalic.ttf") }

    /// Font `NotoSans-Thin`.
    var notoSansThin: RswiftResources.FontResource { .init(name: "NotoSans-Thin", bundle: bundle, filename: "NotoSans-Thin.ttf") }

    /// Font `NotoSans-ThinItalic`.
    var notoSansThinItalic: RswiftResources.FontResource { .init(name: "NotoSans-ThinItalic", bundle: bundle, filename: "NotoSans-ThinItalic.ttf") }

    func makeIterator() -> IndexingIterator<[RswiftResources.FontResource]> {
      [notoSansBlack, notoSansBlackItalic, notoSansBold, notoSansBoldItalic, notoSansExtraBold, notoSansExtraBoldItalic, notoSansExtraLight, notoSansExtraLightItalic, notoSansItalic, notoSansLight, notoSansLightItalic, notoSansMedium, notoSansMediumItalic, notoSansRegular, notoSansSemiBold, notoSansSemiBoldItalic, notoSansThin, notoSansThinItalic].makeIterator()
    }
    func validate() throws {
      for font in self {
        if !font.canBeLoaded() { throw RswiftResources.ValidationError("[R.swift] Font '\(font.name)' could not be loaded, is '\(font.filename)' added to the UIAppFonts array in this targets Info.plist?") }
      }
    }
  }

  /// This `_R.file` struct is generated, and contains static references to 18 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `NotoSans-Black.ttf`.
    var notoSansBlackTtf: RswiftResources.FileResource { .init(name: "NotoSans-Black", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `NotoSans-BlackItalic.ttf`.
    var notoSansBlackItalicTtf: RswiftResources.FileResource { .init(name: "NotoSans-BlackItalic", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `NotoSans-Bold.ttf`.
    var notoSansBoldTtf: RswiftResources.FileResource { .init(name: "NotoSans-Bold", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `NotoSans-BoldItalic.ttf`.
    var notoSansBoldItalicTtf: RswiftResources.FileResource { .init(name: "NotoSans-BoldItalic", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `NotoSans-ExtraBold.ttf`.
    var notoSansExtraBoldTtf: RswiftResources.FileResource { .init(name: "NotoSans-ExtraBold", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `NotoSans-ExtraBoldItalic.ttf`.
    var notoSansExtraBoldItalicTtf: RswiftResources.FileResource { .init(name: "NotoSans-ExtraBoldItalic", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `NotoSans-ExtraLight.ttf`.
    var notoSansExtraLightTtf: RswiftResources.FileResource { .init(name: "NotoSans-ExtraLight", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `NotoSans-ExtraLightItalic.ttf`.
    var notoSansExtraLightItalicTtf: RswiftResources.FileResource { .init(name: "NotoSans-ExtraLightItalic", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `NotoSans-Italic.ttf`.
    var notoSansItalicTtf: RswiftResources.FileResource { .init(name: "NotoSans-Italic", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `NotoSans-Light.ttf`.
    var notoSansLightTtf: RswiftResources.FileResource { .init(name: "NotoSans-Light", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `NotoSans-LightItalic.ttf`.
    var notoSansLightItalicTtf: RswiftResources.FileResource { .init(name: "NotoSans-LightItalic", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `NotoSans-Medium.ttf`.
    var notoSansMediumTtf: RswiftResources.FileResource { .init(name: "NotoSans-Medium", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `NotoSans-MediumItalic.ttf`.
    var notoSansMediumItalicTtf: RswiftResources.FileResource { .init(name: "NotoSans-MediumItalic", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `NotoSans-Regular.ttf`.
    var notoSansRegularTtf: RswiftResources.FileResource { .init(name: "NotoSans-Regular", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `NotoSans-SemiBold.ttf`.
    var notoSansSemiBoldTtf: RswiftResources.FileResource { .init(name: "NotoSans-SemiBold", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `NotoSans-SemiBoldItalic.ttf`.
    var notoSansSemiBoldItalicTtf: RswiftResources.FileResource { .init(name: "NotoSans-SemiBoldItalic", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `NotoSans-Thin.ttf`.
    var notoSansThinTtf: RswiftResources.FileResource { .init(name: "NotoSans-Thin", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `NotoSans-ThinItalic.ttf`.
    var notoSansThinItalicTtf: RswiftResources.FileResource { .init(name: "NotoSans-ThinItalic", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {
        if UIKit.UIImage(named: "Logo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
    }
  }
}